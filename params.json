{"name":"Distributed Database Simulation","tagline":"Distributed Network Hash Table Simulation","body":"##### 1. What this is about:\r\n+ Created a 3-server distributed hash table model using C++ and the necessary socket programming libraries\r\n+ Client-Server communications were conducted through bidirectional UDP sockets\r\n+ Server-Server communications were conducted through TCP sockets\r\n+ Ports were dynamically obtained on the client side  \r\n+ Servers & Clients are run as separate processes on nunki.usc.edu\r\n+ Clients request information by submitting a search query to Server 1\r\n+ The Servers act in a recursive manner to obtain the corresponding value and return it to the client\r\n+ Note: All IPs have been retrieved using 'localhost' as the host name\r\n\r\n\r\n##### 2. File descriptions\r\n+ client1.cpp\r\n\t- Creates and fills a map that stores key-value pairs based on the information in client1.txt\r\n\t- Queries the user for a search command and matches it to a key within the map\r\n\t- Retreives address information of Server 1 (well-known port number 21564)\r\n\t- Creates UDP socket and submits GET request (of the key) to the server using the necessary functions\r\n\t- Recieves a POST message from Server 1 with the associated value\r\n\t- Closes the UDP socket and terminates\r\n\t- At any time an error is detected, the program will output the location of the error and exit\r\n\r\n+ client2.cpp\r\n\t- Does exactly the same as above except it reads data from client2.txt\r\n\r\n+ dhtserver1.cpp\r\n\t- Gets it's own address information using getaddrinfo(\"localhost\",...)\r\n\t- The UDP port number is well-known (static) - 21564\r\n\t- Binds socket to port & IP and enters a while loop that will let it communicate with as many clients as necessary\r\n\t- Note that Server 1 will only cease to operate when ctrl+C is pressed by the user\r\n\t- Inside the while loop, Server 1 will receive the GET message from the Client\r\n\t- If it has the requested value, it will respond with a POST message and the corresponding value\r\n\t- If not, it will call a function that sets up a TCP connection with Server 2\r\n\t- In this function, it will obtain Server 2's address info (although the port number is well-known: 22564)\r\n\t- Then, a new TCP socket is created and bound to Server 1. It will forward the GET request through this socket\r\n\t- After receiving the POST value, it will return to the main function and forward the POST message to the Client\r\n\t- Before returning, it will close the TCP socket\r\n\t- At any time an error is detected, the program will output the location of the error and exit\r\n\r\n\r\n+ dhtserver2.cpp\r\n\t- Creates a TCP socket with well-known port number 22564 and listens for connection requests\r\n\t- In a while loop, it accepts all incoming connections and a new socket is created\r\n\t- Translates the GET request and responds with a POST message or calls a function to setup a TCP connection with Server 3 correspondingly\r\n\t- The function operates exactly like the one in Server 1\r\n\t- Once the TCP connection with Server 3 is terminated, the POST message is returned to Server 1\r\n\t- At any time an error is detected, the program will output the location of the error and exit\r\n\r\n+ dhtserver3.cpp\r\n\t- Creates a TCP socket with well-known port number 23564 and listens for connection requests\r\n\t- In a while loop, it accepts all incoming connections and a new socket is created\r\n\t- Receives the GET request and responds with the corresponding POST value\r\n\t- At any time an error is detected, the program will output the location of the error and exit\r\n\r\n\r\n##### 3. How to Run\r\n+ A Makefile is included. This will compile all of the separate files of code\r\n+ 'make clean' will remove all the executables previously created\r\n+ In three separate windows, please run ./server1, ./server2 and ./server3\r\n+ In a fourth window, ./client1 may be run\r\n+ Client 1 will terminate when its job is done\r\n+ In the same window, ./client2 can be run now\r\n+ Note: At the end, all the Servers must be terminated with ctrl+C\r\n\r\n\r\n##### 4. Format of Exchanged Messages\r\n+ The messages were sent and received between Clients and Servers as char*\r\n+ Many of the operations within the client/server were performed by converting these char*s to strings\r\n\r\n\r\n##### 5. Possible Idiosyncrasies\r\n+ I am unsure of whether this is an idiosyncrasy or not but - My servers and clients bind to the dynamically obtained TCP/UDP port numbers. If I do not bind, the port numbers remain 0 on one side but are accessible on the other (in a client-server scenario). One of the websites from the hints.pdf (https://www.cs.rutgers.edu/~pxk/417/notes/) encourages this to allow for the identification of the socket (specifically section 2 in - https://www.cs.rutgers.edu/~pxk/417/notes/sockets/index.html). \r\n\t- NOTE 1: The program works perfectly fine without the bind calls BESIDES printing out the correct port number on one side.\r\n\t- NOTE 2: I would like to clarify that the port numbers are certainly dynamically obtained.\r\n\t- I hope this isn't too much of a problem\r\n+ If no value is found, the receieve function in Server 2 fails since the error message causes the buffer to overflow but the project document said that we do not need to account for this edge case\r\n\r\n\r\n##### 6. Reused Code\r\n+ I have clearly identified where I have reused code in the project\r\n+ The main areas are\r\n\t- The getaddrinfo() sections have a few (2-4) lines from Beej's Socket Programming Guide\r\n\t- The bind() sections have a few (2-4) lines from this website: https://www.cs.rutgers.edu/~pxk/417/notes/sockets/index.html\r\n\t- These lines are basically information to preload a sockaddr with\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}